<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

    public function myFindAll()
    {


        // First Methode with EntityManager :
//        $queryBuilder = $this->_em->createQueryBuilder()
//            ->select('a')
//            ->from($this->_entityName, 'a');

        // Second method with the shortcut (best)
//        $queryBuilder = $this->createQueryBuilder('a');
//        $query=$queryBuilder->getQuery();
//
//        $results = $query->getResult();
//        return $results;

        // Second method, perfect shortcut
        return $this->createQueryBuilder('a')->getQuery()->getResult();
    }

    public function myFindOne($id)
    {

        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.id = :id')
            ->setParameter('id', $id);

        return $qb
            ->getQuery()
            ->getResult();

    }

    public function findByAuthorAndDate($author, $year)
    {

        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')->setParameter('author', $author)
            ->andWhere('a.date < :year')->setParameter('year', $year)
            ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {

        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \DateTime(date('2017') . '-01-01'))
            ->setParameter('end', new \DateTime(date('2017') . '-12-31'));
    }

    public function myFindByAuthor($author)
    {

        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'CESI');

        $this->whereCurrentYear($qb);

        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function myFindAllDQL()
    {

        // Select de base :
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a');

        // Select avec un seul attribut :
//        $query  = $this->_em->createQuery('SELECT a.title FROM OCPlatformBundle:Advert a');

        // Select avec paramètres :
//        $id = 2;
//        $query  = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id');
//        $query->setParameter('id', $id);


        // Select avec une jointure :
//        $query = $this->_em->createQuery('SELECT a, u FROM OCPlatformBundle:Advert a JOIN a.user u WHERE u.age = 25');

        // Select avec fonction :
//        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a WHERE TRIM(a.author) = \'Alexandre\'');

        // Utilisation de getSingleResult car la requête ne doit retourner qu'un seul résultat
//        return $query->getSingleResult();

        $result = $query->getResult();

        return $result;

    }

    public function getAdverts($page, $nbPerPages)
    {
        $query = $this->createQueryBuilder('a')
            // Jointure sur l'attribut image :
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            // Jointure sur l'attribut catégories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            // Jointure sur l'attribut advertSkills
            ->leftJoin('a.advertSkills', 's')
            ->addSelect('s')
            // et nos petite conditions
            ->orderBy('a.date', 'DESC')
            ->getQuery();

        $query
            ->setFirstResult(($page - 1) * $nbPerPages)
            ->setMaxResults($nbPerPages);

        return new Paginator($query, true);
    }


    public function getAdvertWithApplications()
    { // utilisation de jointure pour éviter la multiplication des requêtes à l'ouverture d'une page si nous faisions du : $entiteA->getEntiteB()

        // Attention : On ne peut faire une jointure que si l'entité du FROM possède un attribut vers l'entité à joindre
        // - Soit l'entité du FROM est propriétaire (non ici)
        // - Soit la relation est bi-directionnelle (OUI ici) (Application->'Many To One'->Advert [inversedBy="applications"] && Advert->'One To Many'->Application [mappedBy="advert"])
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app')// argument 1 : Attribut de l'entité principale sur lequel on fait la jointure ; argument 2 alias de l'entité jointe (arbitraire)
            ->addSelect('app'); // on sélectionne également l'entité jointe via l'addSelect

        return $qb
            ->getQuery()
            ->getResult();

    }

    public function getAdvertWithCategories(array $categoryNames)
    {

        $qb = $this
            ->createQueryBuilder('a')
            ->innerJoin('a.categories', 'cat')
            ->addSelect('cat');

        $qb->where($qb->expr()->in('cat.name', '?1'));
        $qb->setParameter('1', $categoryNames);

        return $qb
            ->getQuery()
            ->getResult();

    }
}
